name: publish
on:
  push:
    tags: ["v*.*.*"]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure tag commit is on main
        id: gate
        run: |
          git fetch origin main --depth=1
          if git merge-base --is-ancestor "$GITHUB_SHA" "origin/main"; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "Tag commit is not on main; skipping."
            echo "ok=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if not on main
        if: steps.gate.outputs.ok != 'true'
        run: exit 0

      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: "8.0.x" }

      - name: Compute version from tag (v0.2.0 -> 0.2.0)
        id: ver
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Add GitHub Packages source
        run: |
          dotnet nuget add source \
            "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --name github \
            --username "${{ github.repository_owner }}" \
            --password "${{ secrets.GITHUB_TOKEN }}" \
            --store-password-in-clear-text

      - run: dotnet restore
      - run: dotnet build SpotiNet.Client/SpotiNet.Client.csproj -c Release --no-restore
      - run: dotnet pack SpotiNet.Client/SpotiNet.Client.csproj -c Release -o ./nupkgs -p:Version=${{ steps.ver.outputs.VERSION }} -p:ContinuousIntegrationBuild=true

      - name: Push to GitHub Packages
        run: dotnet nuget push "./nupkgs/*.nupkg" --source github --skip-duplicate

      - name: Push to nuget.org
        env: { NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }} }
        run: dotnet nuget push "./nupkgs/*.nupkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
